{
	"info": {
		"_postman_id": "a5607177-3392-45f5-b132-2977cac75cbd",
		"name": "MRP_Giebl_Collection",
		"description": "### Welcome to Postman! This is your first collection. \n\nCollections are your starting point for building and testing APIs. You can use this one to:\n\n• Group related requests\n• Test your API in real-world scenarios\n• Document and share your requests\n\nUpdate the name and overview whenever you’re ready to make it yours.\n\n[Learn more about Postman Collections.](https://learning.postman.com/docs/collections/collections-overview/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48852343",
		"_collection_link": "https://if24b067-4405747.postman.co/workspace/.'s-Workspace~c2142444-edc0-4d06-833d-54fbaa0dd9d5/collection/48852343-a5607177-3392-45f5-b132-2977cac75cbd?action=share&source=collection_link&creator=48852343"
	},
	"item": [
		{
			"name": "login success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"message\");",
							"    pm.expect(pm.response.json()).to.have.property(\"token\");",
							"});",
							"",
							"pm.test(\"Response fields have correct types\", function () {",
							"    pm.expect(pm.response.json().message).to.be.a(\"string\");",
							"    pm.expect(pm.response.json().token).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Success message is present\", function () {",
							"    pm.expect(pm.response.json().message).to.include(\"success\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"Max\",\n    \"password\": \"1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "login invalid empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"required\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login invalid empty username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"required\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login invalid empty password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"required\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"Max\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login invalid pwd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"invalid\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"Max\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login invalid username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"invalid\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"max\",\r\n    \"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"invalid\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"max\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "register success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"username\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().message).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().username).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Success message is present\", function () {\r",
							"    pm.expect(pm.response.json().message).to.include(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Username matches request\", function () {\r",
							"    const requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(pm.response.json().username).to.equal(requestBody.username);\r",
							"});\r",
							"\r",
							"pm.test(\"ID is valid UUID format\", function () {\r",
							"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r",
							"    pm.expect(pm.response.json().id).to.match(uuidRegex);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"Oscar\",\r\n    \"password\": \"818181\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register invalid empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"required\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register invalid empty username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"required\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\" : \"818181\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register invalid empty password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message present\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"required\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"Oscar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register invalid pwd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes password\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"Password\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes 6\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"6\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes characters\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"characters\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"Osc\",\r\n    \"password\": \"8181\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register invalid username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes username\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"Username\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes 3\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"3 and 50\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes characters\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"characters\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"OP\",\r\n    \"password\": \"81\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register username exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response fields have correct types\", function () {\r",
							"    pm.expect(pm.response.json().error).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes username\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"Username\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message includes exists\", function () {\r",
							"    pm.expect(pm.response.json().error).to.include(\"exists\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"Max\",\r\n    \"password\": \"81\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/auth/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "",
			"type": "default"
		}
	]
}